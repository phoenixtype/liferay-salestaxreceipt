
Keep in mind that testing `SalesTaxApp` methods may involve more complex scenarios as you would need to mock the input and output streams
or use dependency injection to provide testable implementations of the `TaxCalculator` and `ItemPriceProvider`.
When testing private or static methods, you can either make those methods package-private (remove the `private` keyword) to make them accessible in the tests
or refactor your code to make the methods public and part of the class's public API.

For fields, you can create getter methods or make the fields package-private (remove the `private` keyword) to make them accessible in the tests.
Remember that unit tests should focus on testing the public API of your classes and not the implementation details.
If you find yourself needing to test private or static methods and fields, it's possible that your classes need further refactoring.


To test the SalesTaxApp class, we can use dependency injection to provide testable implementations of the TaxCalculator and ItemPriceProvider.
Additionally, we can use the ByteArrayInputStream and ByteArrayOutputStream classes to mock the input and output streams.
In this test, we create a mock TaxCalculator and ItemPriceProvider using Mockito. Then, we set up the input and output streams to capture the results.
The test simulates user input by setting the System.in to a ByteArrayInputStream with the required data.
The System.out is replaced with a ByteArrayOutputStream to capture the output generated by the SalesTaxApp.
Finally, we assert that the output matches the expected result.
